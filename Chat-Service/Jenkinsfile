pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        BRANCH_NAME = env.GIT_BRANCH
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Read and Increment Version') {
            steps {
                script {
                    if (BRANCH_NAME == 'origin/dev') {
                        def versionFile = readFile 'version-dev.txt'
                        def (major, minor) = versionFile.trim().split('\\.').collect { it.toInteger() }
                        minor += 1
                        env.VERSION = "${major}.${minor}"
                        writeFile file: 'version-dev.txt', text: "${major}.${minor}"
                    } else if (BRANCH_NAME == 'origin/main') {
                        def versionFile = readFile 'version-main.txt'
                        def (major, minor) = versionFile.trim().split('\\.').collect { it.toInteger() }
                        major += 1
                        minor = 0
                        env.VERSION = "${major}.${minor}"
                        writeFile file: 'version-main.txt', text: "${major}.${minor}"
                    } else {
                        error "Unsupported branch: ${BRANCH_NAME}"
                    }

                    sh '''
                    git config user.name "vhs24"
                    git config user.email "voson1024@gmail.com"
                    git add version-*.txt
                    git commit -m "Increment version to ${VERSION}"
                    git push origin ${BRANCH_NAME.replace('origin/', '')}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def serviceName = 'chat-service'
                    def dockerImage = "mini-social-network/${serviceName}:${env.VERSION}"
                    dir('ApiGateway-Service') {
                        docker.build(dockerImage, "--build-arg BUILD_ID=${env.BUILD_ID} .")
                        docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                            docker.image(dockerImage).push()
                            docker.image(dockerImage).push('latest')
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
