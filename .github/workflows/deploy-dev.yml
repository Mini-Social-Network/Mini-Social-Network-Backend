name: CI/CD Pipeline branch dev

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up environment by docker-compose
        run: |
          docker-compose down
          docker-compose up -d

      - name: Build each service with Gradle and create Docker images
        run: |
          services=("ApiGateway-Service" "Eureka-Service" "Auth-Service" "User-Service" "Chat-Service" "Post-Service" "Notify-Service" "Config-Service" "System-Service")
          for service in "${services[@]}"; do
                      if [ -d "$service" ]; then
                        echo "Building $service with Gradle"
                        cd $service
                        chmod +x gradlew
                        ./gradlew build
                        cd ..
                      else
                        echo "Directory $service does not exist"
                        exit 1
                      fi
                    done

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          declare -A services=([apigateway-service]=ApiGateway-Service [eureka-service]=Eureka-Service [auth-service]=Auth-Service [user-service]=User-Service [system-service]=System-Service [chat-service]=Chat-Service [post-service]=Post-Service [notify-service]=Notify-Service [config-service]=Config-Service)
          for service in "${!services[@]}" ; do
            echo "Building Docker image for ${services[$service]}"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:${{ github.sha }} ./${services[$service]}
            echo "Pushing Docker image for $service"
            docker push ${{ secrets.DOCKER_USERNAME }}/$service:${{ github.sha }}
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Images
        run: |
          services=("apigateway-service" "eureka-service" "auth-service" "user-service" "system-service" "chat-service" "post-service" "notify-service" "config-service")
          for service in "${services[@]}"; do
            echo "Pulling Docker image for $service"
            docker pull ${{ secrets.DOCKER_USERNAME }}/$service:${{ github.sha }}
          done

      - name: Deploy with Docker Compose
        run: |
          sudo systemctl stop mono-xsp4.service || true
          sudo systemctl disable mono-xsp4.service || true
          sudo kill -9 $(sudo lsof -t -i:8084)
          cd run
          export TAG=${{ github.sha }}
          docker-compose down
          docker-compose up -d

      - name: Deploy to Kubernetes
        run: |
          helm upgrade app helm/app/ --install --namespace mini-social-network-backend --reset-values --values=helm/env_values/dev.yaml --set ingress.domainSuffix=minisocialnetwork.com --set eurekaDesc.image=vhs24/eureka-service:${{ github.sha }} --set apigatewayDesc.image=vhs24/apigateway-service:${{ github.sha }} --set authDesc.image=vhs24/auth-service:${{ github.sha }} --set chatDesc.image=vhs24/chat-service:${{ github.sha }} --set postDesc.image=vhs24/post-service:${{ github.sha }} --set notifyDesc.image=vhs24/notify-service:${{ github.sha }} --set systemDesc.image=vhs24/system-service:${{ github.sha }} --set userDesc.image=vhs24/user-service:${{ github.sha }} --set-string 'mysql.address=mysql://localhost:3306/db04?ssl-mode=REQUIRED' --set-string mysql.user=root --set-string mysql.pass='root' --set-string redis.user=default --set-string redis.pass='test'
